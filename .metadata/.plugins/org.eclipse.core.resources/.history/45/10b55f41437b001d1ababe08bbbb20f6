<!DOCTYPE html>
<html lang="en">
   <head>
      <title>three.js webgl - geometry - cube</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
      <link type="text/css" rel="stylesheet" href="main.css">
   </head>
   <body>

      <!-- Import maps polyfill -->
      <!-- Remove this when import maps will be widely supported -->
      <script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

      <script type="importmap">
         {
            "imports": {
               "three": "../build/three.module.js",
               "three/addons/": "./jsm/"
            }
         }
      </script>

      <script type="module">

         import * as THREE from 'three';

         let camera, scene, renderer;
         let player;
         let bad;
         let shot;
         
         var bads = [];
         
         var xzs = [
            { 'x':-300,      'z':-300 },
            { 'x':300,      'z':300 },
            { 'x':-300,    'z':300 },
            { 'x':300,       'z':-300 }
         ]; //상수로서 작용한다

         function init() {

            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
            camera.position.z = 0;
            camera.position.y = 1000;

            scene = new THREE.Scene();
            
            var texture = new THREE.TextureLoader().load( 'tangtang/plane.png' );
            var geometry = new THREE.BoxGeometry( 100, 10, 100 );
            var material = new THREE.MeshBasicMaterial( { map: texture } );
            player = new THREE.Mesh( geometry, material );
            scene.add( player );
            player.position.z = 0;
            player.position.x = 0;
            camera.lookAt( player.position );
            

            
            for(var i=0;i<xzs.length;i++){
               geometry = new THREE.BoxGeometry( 100, 10, 100 );
               texture = new THREE.TextureLoader().load( 'tangtang/bad.png' );
               material = new THREE.MeshBasicMaterial( { map: texture } );
               
               var bad = new THREE.Mesh( geometry, material );
               bads.push( bad );
               scene.add( bad );
            }
            
            for(var i=0;i<xzs.length;i++){
               bads[i].position.x = xzs[i].x;
               bads[i].position.z = xzs[i].z;
            }
   
            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            document.body.appendChild( renderer.domElement );

            //
            window.addEventListener( 'resize', onWindowResize );

         }

         function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );

         }
         var p_speed = 0;
         function animate() {
            requestAnimationFrame( animate );

            var rad = player.rotation.y;
            var s = Math.sin(rad)*p_speed;
            var c = Math.cos(rad)*p_speed;
            
            player.position.z += -c;
            player.position.x += -s;

            renderer.render( scene, camera );
         }
         
         document.addEventListener("keydown", onDocumentKeyDown, false);
         function onDocumentKeyDown(event) {

            var key = event.key;
            if (key == 'ArrowUp') {
               p_speed += 0.1;
            } else if (key == 'ArrowDown') {
               p_speed -= 0.5;
            } else if (key == 'ArrowLeft') {
               player.rotation.y += 0.02;
            } else if (key == 'ArrowRight') {
               player.rotation.y -= 0.02;
            } 
         
            if(p_speed<0){
               p_speed = 0;
            }
         };
         
         init();
         animate();

      </script>

   </body>
</html>